
// External libraries //
MiddleClass 	- https://github.com/kikito/middleclass/wiki
Hump (timer)	- http://vrld.github.io/hump/

// Load resources //
resource.getImage( image_file, wrap )
resource.getSound( sound_file, stype )
resource.getImageDimensions( image_file )

// Level management //
Level:createEntity( class, ... )
Level:removeEntity( ent )
Level:getEntitiesByClass( class )
Level:getEntitiesByMixin( mixin )
Level:getCamera()
Level:getPhysicsWorld()

// GUI //
GUI:addSimpleElement( depth, pos, image_file, id )
GUI:addDynamicElement( depth, pos, func, id )

// Tables //
table.forEach( tab, func )
table.keyFromValue( tbl, val ) 				-- gets key of FIRST matched value
table.removeByValue( tbl, val ) 			-- removes a SINGLE entry (first matched) from table
table.toString( t, name, nice_formatting, maxseq ) 	-- summarizes (sub)tables longer than maxseq

// Vector math //
vec Vector:copy()
num Vector:distance( vec )
num Vector:distance2( vec )
num Vector:length()
num Vector:angle()
vec Vector:snap( gridsize )		-- modifies original
vec Vector:approach( vec, step )	-- modifies original
vec Vector:perpendicular()
num Vector:dot( vec )
num Vector:cross( vec )
vec Vector:projectOn( vec )
vec Vector:mirrorOn( vec )
vec Vector:normalize()			-- modifies original
vec Vector:getNormalized() / getNormal()
vec Vector:trim( maxLength )		-- modifies original
vec Vector:getTrimmed( maxLength )
vec Vector:rotate( r ) 			-- modifies original
vec Vector:getRotated( r )
vec Vector:multiplyBy( a )		-- modifies original
vec Vector:divideBy( a )		-- modifies original
vec Vector:add( vec )			-- modifies original
vec Vector:subtract( vec )		-- modifies original

// Sprites //
Sprite( { 	image,  	// image
		offset,
		size,		// default = image size
		origin_pos,
		origin_relative, // overrides origin_pos (sets origin_pos to origin_relative * size)
		num_frames,
		fps,
		should_loop
	} )

// Input controller //

bool InputController:keyIsPressed(key)
bool InputController:keyIsReleased(key)
bool InputController:mouseIsPressed(button) -- l, r, m, wd, wu, x1, x2
bool InputController:mouseIsReleased(button)
bool InputController:keyIsDown(key)
bool InputController:mouseIsDown(button)

void InputController:addKeyPressCallback(id, key, func) -- callback = func(key)
void InputController:addKeyReleaseCallback(id, key, func) -- callback = func(key, timediff)
void InputController:addMousePressCallback(id, button, func) -- callback = func(button)
void InputController:addMouseReleaseCallback(id, button, func) -- callback = func(button, timediff)

void InputController:removeKeyPressCallback(id)
void InputController:removeKeyReleaseCallback(id)
void InputController:removeMousePressCallback(id)
void InputController:removeMouseReleaseCallback(id)

// Util functions //
util.getPathFromFilename( file_path, (optional) seperator )
util.equalsAll(value, ...)
util.equalsAny(value, ...)

// Signals and slots //
signal.new() 								-- returns new signal register table
signal.register( signal, function )					-- register function to execute when signal is emitted
signal.emit( signal, ... (function parameters) )			-- triggers signal with the given parameters
signal.emit_pattern( signal_pattern, ... (function parameters) ) 	-- triggers all matched signals (http://www.lua.org/manual/5.1/manual.html#5.4.1)
signal.remove( signal, ... (functions to remove) ) 			-- removes function(s) from stated signal
signal.remove_pattern( signal_pattern, ... (functions to remove) )
signal.clear( signal ) 							-- clears the whole signal
signal.clear_pattern( signal )

// Timers //
timer 	timer.new()						-- create new timer instance
handle 	timer.add(delay, function)				-- trigger <function>() after <delay>
handle	timer.addPeriodic(delay, function, (optional) count)	-- trigger <function>() every <delay>, for <count> times (infinite if <count> = 0)
handle	timer.do_for(delay, function, (optional) after)		-- executes <function>(dt) every update step for the next <delay> seconds. After that it calls <after>()
void	timer.cancel(handle)					-- removes the function that is linked to the listed <handle>
void	timer.clear()						-- clears whole timer
void	timer.update(dt)					-- update the timer
handle	timer.tween(duration, subject, target, (optional) method, (optional) after, ...)
								-- duration: duration of the tween
								-- subject: reference to a table
								-- target: target key-values to tween in the subject table
								-- method: default 'linear'. See Tweening Methods: http://vrld.github.io/hump/#hump.timerTweening_methods
								-- after: function to execute when duration has passed
TWEENING EXAMPLE:
	circle = {rad = 10, pos = {x = 400, y = 300}}
    	-- multiple tweens can work on the same subject
   	-- and nested values can be tweened, too
   	Timer.tween(5, circle, {rad = 50}, 'in-out-quad')
    	Timer.tween(2, circle, {pos = {y = 550}}, 'out-bounce')
