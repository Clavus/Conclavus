
// External libraries //
MiddleClass 		- https://github.com/kikito/middleclass/wiki
Hump			- http://vrld.github.io/hump/
tlib			- http://love2d.org/forums/viewtopic.php?f=5&t=76960
lume			- https://github.com/rxi/lume
lovebird		- https://github.com/rxi/lovebird
loveframes		- http://nikolairesokav.com/projects/loveframes
SPERM (yes, really)	- http://www.love2d.org/forums/viewtopic.php?f=5&t=76986
lovenoise		- http://www.love2d.org/forums/viewtopic.php?f=5&t=78140

// Time //
num	currentTime()	- returns seconds since game start

// Load resources //
img	resource.getImage( image_file, wrap, force_new ) -- if force_new = true, then it creates a new resource and skips the cache
snd	resource.getSound( sound_file, stype, force_new )
x,y	resource.getImageDimensions( image_file )

// Level management //
ent	Level:createEntity( class, ... )
tab	Level:getEntitiesByClass( class )
tab	Level:getEntitiesByMixin( mixin )
ent	Level:getCamera()
void	Level:addPhysicsSystem( physics_system ) -- physics systems are updated after camera, but before level entities

// Physics system //
Box2DPhysicsSystem( allowsleep ) -- default LOVE Box2D physics system
Box2DPhysicsSystem:getWorld()
Box2DPhysicsSystem:initDefaultCollisionCallbacks()
Box2DPhysicsSystem:setCallbacks( beginContact, endContact, preSolve, postSolve ) 

// Camera //
void	Camera:setScale( x, y )
x,y	Camera:getScale()
void	Camera:attach()			-- push graphics transformations
void	Camera:detach()			-- pop graphics transformations
void	Camera:draw( func )		-- draw given functions within transformations
x,y	Camera:cameraCoords( x, y )	-- returns camera coordinates from given world coordinates
x,y	Camera:worldCoords( x, y )	-- returns world coordinates from given camera coordinates
x,y	Camera:getMouseWorldPos()	-- returns world coordinates of the mouse
num	Camera:getWidth()
num	Camera:getHeight()
num	Camera:getDiagonal()
num	Camera:getDiagonal2()
num	Camera:getBackgroundQuadWidth()
num	Camera:getBackgroundQuadHeight()
bool	Camera:isEntityVisible( ent )	-- returns if entity's draw bounding box is visible for the camera

// Screen //
Rendering is resolution independent. Original render width / height and aspect ratio are
derived from the conf.lua window settings.

screen.init( w, h, flags )	-- initializes display settings. Sets default render width and height for the game
screen.setDefaultRenderDimensions( w, h ) -- overrides default render width / height
screen.updateDisplays()		-- updates list of displays and their resolutions, useful before populating video settings
screen.set( w, h, flags )	-- like love.graphics.setMode, but updates screen settings along with it
screen.getRenderWidth()		-- gets current render width
screen.getRenderHeight()	-- gets current render height
screen.getAspectRatio()		-- gets current aspect ratio of the screen
screen.getMousePosition()
screen.setScaleType( stype )	-- can be set to one of the following:
				-- SCREEN_SCALE.CENTER 			-- centre drawing screen, never larger than render width / height
				-- SCREEN_SCALE.STRETCH			-- stretch screen over entire window
				-- SCREEN_SCALE.FIT_LETTERBOX		-- fit screen in window while maintaining default render aspect ratio, without clipping
				-- SCREEN_SCALE.FIT_CLIPEDGES		-- fit screen in window, overriding render dimensions to avoid black borders 
				-- SCREEN_SCALE.FIT_HEIGHT		-- fit screen vertically, crop horizontally
				-- SCREEN_SCALE.FIT_WIDTH		-- fit screen horizontally, crop vertically

// GUI //
GUI:addSimpleElement( id, depth, x, y, image / image_file )
GUI:addDynamicElement( id, depth, x, y, func )

// Vector math //
vec	Vector:copy()
x,y	Vector:unpack()
num	Vector:distance( vec )
num	Vector:distance2( vec )
num	Vector:length()
num	Vector:angle()
vec	Vector:snap( gridsize )		-- modifies self
vec	Vector:approach( vec, step )	-- modifies self
vec	Vector:round( [decimals] ) 	-- modifies self
vec	Vector:perpendicular()
num	Vector:dot( vec )
num	Vector:cross( vec )
vec	Vector:projectOn( vec )
vec	Vector:mirrorOn( vec )
vec	Vector:normalize()		-- modifies self
vec	Vector:getNormalized() / getNormal()
vec	Vector:trim( maxLength )	-- modifies self
vec	Vector:getTrimmed( maxLength )
vec	Vector:rotate( r ) 		-- modifies self
vec	Vector:getRotated( r )
vec	Vector:multiplyBy( a )		-- modifies self
vec	Vector:divideBy( a )		-- modifies self
vec	Vector:add( vec )		-- modifies self
vec	Vector:subtract( vec )		-- modifies self

// Extended table functions //
tab	table.copy(t)				-- copies base table, but not nested tables (references original tables)
tab	table.deepCopy(t, lookup_table)		-- fully copies table including nested tables
bool	table.hasValue( t, val )
mix	table.keyFromValue( tbl, val )		-- returns key of first occurence of <val> in this table
tab	table.keysFromValue( tbl, val )		-- returns all keys that hold <val>
tab	table.removeByValue( tbl, val )		-- removes all occurences of <val> from the table (assumes table is sequential)
tab	table.removeByFilter( tbl, func )	-- removes all occurences where <func> returns true (assumes table is sequential)
tab	table.getKeys(t)			-- get all keys in the table
tab	table.shuffle(t)			-- shuffles key - value combinations
tab	table.forEach( t, func, ... ) 		-- if func is a function, then do func( key, value, ... ) on every table entry
						-- or if func is a string, do entry_value:func( ... ) on every table entry
num	table.count( t, count_func ) 		-- if count_func(key, value) is supplied, only count where it returns true
mix	table.random( t )			-- get random value
tab	table.filter( t, func, retainkeys ) 	-- filter t where func(key, value) returns true, returns new filtered table
tab	table.merge(t1, t2, retainkeys) 	-- merges t2 into t1, when retaining keys, t2 overwrites t1 keys
str	table.toString( t, name, nice_formatting, [maxdepth], [maxseq] ) -- summarizes (sub)tables longer than maxseq, or deeper nested than maxdepth

// Iteration //
for p,c in chars( str ) do 	  -- iterates over every char in "string", with p as pos in string, c as char
for p,w in words( str ) do 	  -- iterates over every word separated by a space
for p,w in split( str, delim ) do -- iterates overy every word seperated by delim

// Extended string functions //
tab	string.split(str, [sep])	-- splits on space if seperator not provided
str	string.trim(str, [chars]) 	-- trims whitespace if chars not set
str	string.simpleFormat(str, ...)	-- string.simpleFormat("{b} hi {a}", {a = "mark", b = "Oh"}) -- Returns "Oh hi mark"
					-- string.simpleFormat("Hello {1}!", "world") -- Returns "Hello world!"
str	string.fill(str, size, fixpos, char) -- Fills up string with size * char, "before" or "after" the str. 
					 -- Example: string.fill(12, 5, "before", "0") returns "00012".

// Extended math functions //

num	math.distance( x1, y1, x2, y2 )
num	math.deg2rad( degrees )
num	math.rad2deg( rad )
num	math.clamp( num, low, high )
num	math.randomRange( low, high )		-- returns float between low and high
num	math.sign( x )				-- returns 1 or -1 depending on if x is negative
num	math.round( i, [decimals] )		-- rounds to the specified number of decimals (default 0)
num	math.approach( cur, target, inc ) 	-- sets <inc> step from <cur> to <target>
num	math.lerp(a, b, frac) 			-- <frac> is in the range of 0 to 1
num	math.smooth(a, b, frac) 		-- same as math.lerp but with cosine interpolation
num	math.normalizeAngle( a )		-- normalizes angle to be between pi and -pi radians
num	math.angleDifference( a, b )
num	math.approachAngle( cur, target, inc )

// Extended package functions //
package.loadSwappable(table)		-- loads swappable lua modules. Table in format { { module_name = "path_to_module" }, ... }
package.hotswap(module_ref)		-- hotswaps given module reference while game is running. Awesome feature.
package.autoHotswapEnabled( b )		-- enabled auto-hotswapping when a file is changed
package.autoHotswapUpdateRate( n )	-- update rate (in seconds) of auto-hotswap polling
package.updatePackages()		-- scans for files to hotswap

// Extended debug functions //
void	debug.printLoadedPackages()	-- prints list of everything in packages.loaded
num,... debug.time( func, ... )	-- executes function, returns time followed by function returns
void	debug.benchmarkStart( name )	-- starts benchmarking
void	debug.benchmarkStop( name, message, cond_func )	-- stops benchmark <name>, prints <message> (use tokens {name} 
							-- and {time} to show name and time. <cond_func>(time) is a conditional
							-- function that returns if it should print the message at all

// Sprites //
Sprite( { (img) image, (vec) offset, (vec) size (default = image size), (vec) origin_pos, 
	  (vec) origin_relative, (overrides origin_pos and sets it to origin_relative * size, so (0.5, 0.5) means center of image)
	  (num) num_frames, (num) fps, (bool) should_loop } )

// Input controller //

bool	InputController:keyIsPressed(key)
bool	InputController:keyIsReleased(key)
bool	InputController:keyIsDown(key)
bool	InputController:mouseIsPressed(button)				-- button = l, r, m, wd, wu, x1, x2
bool	InputController:mouseIsReleased(button)
bool	InputController:mouseIsDown(button)
bool	InputController:gamepadIsPressed(joystick, button)		-- joystick = Joystick object
bool	InputController:gamepadIsReleased(joystick, button)
bool	InputController:gamepadIsDown(joystick, button)
num	InputController:gamepadAxisValue(joystick, axis)		-- note: shoulder triggers are considered axis, not buttons

void	InputController:addKeyPressCallback(id, key, callback) 		-- callback = function(key)
void	InputController:addKeyReleaseCallback(id, key, callback) 	-- callback = function(key, timediff)
void	InputController:addMousePressCallback(id, button, callback) 	-- callback = function(button)
void	InputController:addMouseReleaseCallback(id, button, callback) 	-- callback = function(button, timediff)
void	InputController:addGamepadPressCallback(id, button, callback) 	-- callback = function(joystick, button)
void	InputController:addGamepadReleaseCallback(id, button, callback) -- callback = function(joystick, button, timediff)
void	InputController:addGamepadAxisCallback(id, axis, callback)	-- callback = function(joystick, axis, value)
void	InputController:removeKeyPressCallback(id)
void	InputController:removeKeyReleaseCallback(id)
void	InputController:removeMousePressCallback(id)
void	InputController:removeMouseReleaseCallback(id)
void	InputController:removeGamepadAxisCallback(id)

void	InputController:registerAction( action )			-- register an action for input binding
void	InputController:bindActionToKey( action, key )			-- bind specified keyboard key to action
void	InputController:bindActionToMouse( action, btn )		-- idem mouse buttons
void	InputController:bindActionToGamepad( action, btn)		-- idem gamepad buttons
void	InputController:unbindActionFromKey( action, [key] )		-- unbind specified key from action, or if left blank, unbind all keys that trigger action
void	InputController:unbindActionFromMouse( action, [btn] )		-- idem mouse buttons
void	InputController:unbindActionFromGamepad( action, [btn]) 	-- idem gamepad buttons

void	InputController:actionIsPressed(action)
void	InputController:actionIsReleased(action)
void	InputController:actionIsDown(action)

void	InputController:addActionPressCallback(id, action, callback) 	-- callback = function(input_type, input, joystick) 
void	InputController:addActionReleaseCallback(id, action, callback) 	-- callback = function(input_type, input, timediff, joystick)
									-- 	input_type = "key", "mouse" or "gamepad", input = key/button pressed
									-- 	joystick object passed if triggered by gamepad
void	InputController:removeActionPressCallback(id)
void	InputController:removeActionReleaseCallback(id)

// Util functions //
str	util.getPathFromFilename( file_path, [seperator] )
var	util.choose( ... )
var	util.weightedChoice( ... ) 	-- in format util.weightedChoice("duck", 20, "cat", 10). "duck" is twice as likely to be chosen
tab	util.array(...)			-- util.array(pairs({a = 1, b = 2})) -- Returns {"a", "b"}
bool	util.equalsAll(value, ...)
bool	util.equalsAny(value, ...)
void	util.lua( str ) 		-- runs the given string
psystem	util.readParticleSystem( path ) -- read SPERM particle configurations and returns a new ParticleSystem from it
void	util.openSaveDirectory()	-- opens save directory in file explorer

// Graphics //
graphics.roundRectangle(mode, x, y, w, h, radius, segments) -- mode 'fill' or 'line'
graphics.ellipse( mode, x, y, rx, ry, angle, ox, oy ) -- mode 'fill' or 'line'. rx, ry = radii for x, y. ox, oy = origin, default top left (0, 0)
graphics.arrow( x1, y1, x2, y2, arrow_head_length, arrow_head_width ) -- draws a line with an arrow head point towards x2, y2

// Noise //
num	noise.simplex(pos, seed, frequency)				      	-- pos is table of dimensional values ({x}, {x,y}, {x,y,z} or {x,y,z,w})
num	noise.fractal(pos, seed, frequency, octaves, lacunarity, persistence) 	-- good default: octaves 1, lacunarity 2, persistence 0.5
num	noise.ridgedMulti(pos, seed, frequency, octaves, lacunarity, persistence)
num	noise.billow(pos, seed, frequency, octaves, lacunarity, persistence)
num	noise.findOctaveLimit(persistence, detail)

// Color class //
Color:copy()		-- Copies Color instance
Color:toHex()		-- Example: Color.Red:toHex() returns "FF0000"
Color:getTable()	-- returns { r, g, b, a }
Color:unpack()		-- returns r, g, b, a
Color:negative()	-- modifies self
Color:invert()		-- modifies self
Color:getHSV()		-- returns h, s, v, a in [0, 255] range
Color.lerp( color1, color2, frac ) -- lerp from color1 to color2 by fraction [0 to 1], returns new color
Color.fromHex( hex )	-- returns new Color
Color.fromHSV(h, s, v, a) -- returns new Color

// Signals and slots //
signal.new() 						-- returns new signal register table
signal.register( signal, function )			-- register function to execute when signal is emitted
signal.emit( signal, ... (func params) )		-- triggers signal with the given parameters
signal.emit_pattern( signal_pattern, ... (func params) ) -- triggers all matched signals (http://www.lua.org/manual/5.1/manual.html#5.4.1)
signal.remove( signal, ... (funcs to remove) ) 		-- removes function(s) from stated signal
signal.remove_pattern( signal_pattern, ... (funcs to remove) )
signal.clear( signal ) 					-- clears the whole signal
signal.clear_pattern( signal )

// Timers //
timer	timer.new()					-- create new timer instance
handle	timer.add(delay, function)			-- trigger <function>() after <delay>
handle	timer.addPeriodic(delay, function, [count])	-- trigger <function>() every <delay>, for <count> times (infinite if <count> = 0)
handle	timer.do_for(delay, function, [after])		-- executes <function>(dt) every update step for the next <delay> seconds. After that it calls <after>()
void	timer.cancel(handle)				-- removes the function that is linked to the listed <handle>
void	timer.clear()					-- clears whole timer
void	timer.update(dt)				-- update the timer
handle	timer.tween(duration, subject, target, [method], [after], ...)
							-- duration: duration of the tween
							-- subject: reference to a table
							-- target: target key-values to tween in the subject table
							-- method: default 'linear'. See Tweening Methods: http://vrld.github.io/hump/#hump.timerTweening_methods
							-- after: function to execute when duration has passed
TWEENING EXAMPLE:
	circle = {rad = 10, pos = {x = 400, y = 300}}
    	-- multiple tweens can work on the same subject
   	-- and nested values can be tweened, too
   	Timer.tween(5, circle, {rad = 50}, 'in-out-quad')
    	Timer.tween(2, circle, {pos = {y = 550}}, 'out-bounce')

// Gamestate //
gamestate.set( gamestate, ... )		-- pops entire stack and sets this gamestate
gamestate.push( gamestate, ... )	-- pushes gamestate on top of stack
gamestate.pop()
gamestate.switch( gamestate, ... )	-- swaps gamestate on top of stack with this one
gamestate.current()			-- returns table of current gamestate
gamestate.drawStack()			-- calls draw() function on every gamestate in the stack (ascending order)
gamestate.printStack()			-- debug print stack

// Advanced math / trigonometry / geometry //
mlib readme: https://github.com/davisdude/mlib/blob/master/README.md (function names corrected to have the same casing as the rest of the engine)

// Rich text //
tlib: http://love2d.org/forums/viewtopic.php?f=5&t=76960

EXAMPLE:
---- Init
textref = tlib.new( '{white}White, {red}Red, {font}{blue}Blue{white} {pic}.', {
      x = 0,  y = 32, 
      red = { 255, 0, 0, 255 }, -- color definition
      blue = Color.Blue, -- alternatively accepts Color class
      white = { r = 255, g = 255, b = 255 }, -- or tables in this format 
      pic = love.graphics.newImage( 'pics/pic.png' ), 
      font = love.graphics.newFont( 'fonts/font.ttf' ), 
   } )

---- Draw
tlib.draw(textref)

